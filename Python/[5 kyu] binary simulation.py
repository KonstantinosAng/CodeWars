# see https://www.codewars.com/kata/5cb9f138b5c9080019683864/solutions

def binary_simulation(s, q):
  rv = []
  for operation in q:
    if operation[0] == 'I':
      temp = ''
      for i, bit in enumerate(s):
        if operation[1] <= i+1 <= operation[2]:
          if bit == '1': temp += '0'
          else: temp += '1'
        else:
          temp += bit
      s, temp = temp, ''
    else:
      rv.append(s[operation[1]-1])
  return rv

from TestFunction import Test
Test = Test(None)
Test.it("Basic tests")
Test.assert_equals(binary_simulation("0011001100", [['I', 1, 10], ['I', 2, 7], ['Q', 2], ['Q', 1], ['Q', 7], ['Q', 5]]), ['0','1','1','0'])
Test.assert_equals(binary_simulation("1011110111", [['I', 1, 10], ['I', 2, 7], ['Q', 2], ['Q', 1], ['Q', 7], ['Q', 5]]), ['0','0','0','1'])
Test.assert_equals(binary_simulation("1011110111", [['I', 1, 10], ['I', 2, 7]]), [])
Test.assert_equals(binary_simulation("0000000000", [['I', 1, 10], ['Q', 2]]), ['1'])
Test.assert_equals(binary_simulation("0101001110100101101010101011011110100111001", [['I', 16, 30], ['I', 35, 39], ['I', 29, 36], ['I', 6, 6], ['I', 32, 39], ['I', 33, 37], ['Q', 9], ['I', 5, 23], ['I', 30, 35], ['I', 3, 19], ['I', 32, 37], ['Q', 37], ['I', 18, 27], ['Q', 36], ['I', 26, 30], ['I', 32, 32], ['I', 14, 18], ['I', 28, 31], ['Q', 10], ['I', 4, 34], ['Q', 33], ['I', 18, 33], ['I', 24, 26], ['I', 30, 37], ['I', 1, 28], ['Q', 31], ['I', 36, 37], ['Q', 8], ['I', 38, 38], ['Q', 27], ['Q', 24], ['I', 22, 23], ['Q', 33], ['I', 41, 41], ['I', 24, 30], ['Q', 21], ['I', 26, 31], ['I', 27, 38], ['Q', 17], ['Q', 41], ['Q', 23], ['Q', 39], ['I', 33, 34], ['I', 42, 42], ['Q', 13], ['Q', 31], ['Q', 39], ['I', 9, 22], ['Q', 18], ['I', 29, 29], ['I', 29, 36], ['Q', 15], ['I', 21, 35], ['Q', 10], ['Q', 7], ['Q', 19], ['Q', 34], ['Q', 42], ['I', 41, 41], ['Q', 6], ['Q', 28], ['Q', 1]]), ['1', '0', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1'])
Test.assert_equals(binary_simulation("11011111100111", [['Q', 2], ['Q', 2], ['Q', 10], ['I', 13, 13], ['I', 2, 10], ['I', 1, 1], ['I', 13, 13], ['I', 3, 5], ['I', 12, 12], ['I', 3, 10], ['I', 9, 10], ['Q', 3], ['Q', 12], ['Q', 4], ['Q', 6], ['I', 5, 7], ['I', 4, 10], ['Q', 8], ['Q', 3], ['Q', 11], ['I', 1, 5], ['I', 2, 9], ['I', 9, 10], ['Q', 8], ['I', 2, 9], ['Q', 6], ['I', 7, 9], ['I', 10, 12], ['I', 11, 13], ['I', 9, 9], ['Q', 13], ['I', 5, 12], ['Q', 11], ['I', 3, 3], ['I', 6, 10], ['Q', 5], ['I', 3, 3], ['Q', 4], ['Q', 1], ['I', 5, 6], ['Q', 4], ['I', 9, 9], ['Q', 8], ['I', 2, 13], ['Q', 9], ['I', 4, 10], ['Q', 7], ['I', 9, 10], ['Q', 13], ['I', 3, 7], ['I', 5, 8], ['I', 11, 13], ['I', 4, 11], ['I', 3, 5], ['I', 5, 13], ['I', 5, 11], ['Q', 4], ['I', 8, 9], ['I', 2, 2], ['I', 4, 9], ['I', 9, 11], ['I', 12, 12], ['Q', 5], ['Q', 3], ['Q', 1], ['Q', 2], ['I', 9, 13], ['I', 8, 12], ['I', 6, 7], ['I', 7, 13], ['I', 7, 10], ['Q', 2], ['Q', 7]]), ['1', '1', '0', '1', '0', '0', '1', '0', '1', '0', '1', '1', '0', '1', '0', '0', '1', '0', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1'])
